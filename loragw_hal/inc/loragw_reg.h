/*
 / _____)             _              | |    
( (____  _____ ____ _| |_ _____  ____| |__  
 \____ \| ___ |    (_   _) ___ |/ ___)  _ \
 _____) ) ____| | | || |_| ____( (___| | | |
(______/|_____)_|_|_| \__)_____)\____)_| |_|
    ©2013 Semtech-Cycleo

Description:
    Functions used to handle a single Lora gateway.
    Registers are addressed by name.
    Multi-bytes registers are handled automatically.
    Read-modify-write is handled automatically.
*/


#ifndef _LORAGW_REG_H
#define _LORAGW_REG_H

/* -------------------------------------------------------------------------- */
/* --- DEPENDANCIES --------------------------------------------------------- */

#include <stdint.h>     /* C99 types */
#include <stdbool.h>    /* bool type */

/* -------------------------------------------------------------------------- */
/* --- PUBLIC CONSTANTS ----------------------------------------------------- */

#define LGW_REG_SUCCESS  0
#define LGW_REG_ERROR   -1

/*
auto generated register mapping for C code : 10-Jun-2013 16:22:30
this file contains autogenerated C struct used to access the LORA register from the Primer firmware
this file is autogenerated from registers description
227 registers are defined
*/
#define LGW_PAGE_REG 0
#define LGW_SOFT_RESET 1
#define LGW_VERSION 2
#define LGW_RX_DATA_BUF_ADDR 3
#define LGW_RX_DATA_BUF_DATA 4
#define LGW_TX_DATA_BUF_ADDR 5
#define LGW_TX_DATA_BUF_DATA 6
#define LGW_CAPTURE_RAM_ADDR 7
#define LGW_CAPTURE_RAM_DATA 8
#define LGW_PIC_PROM_ADDR 9
#define LGW_PIC_PROM_DATA 10
#define LGW_RX_PACKET_DATA_FIFO_NUM_STORED 11
#define LGW_RX_PACKET_DATA_FIFO_ADDR_POINTER 12
#define LGW_RX_PACKET_DATA_FIFO_STATUS 13
#define LGW_RX_PACKET_DATA_FIFO_PAYLOAD_SIZE 14
#define LGW_MBWSSF_MODEM_ENABLE 15
#define LGW_CONCENTRATOR_MODEM_ENABLE 16
#define LGW_FSK_MODEM_ENABLE 17
#define LGW_CLK32M_EN 18
#define LGW_CLKHS_EN 19
#define LGW_RX_INVERT_IQ 20
#define LGW_MODEM_INVERT_IQ 21
#define LGW_MBWSSF_MODEM_INVERT_IQ 22
#define LGW_RX_EDGE_SELECT 23
#define LGW_MISC_RADIO_EN 24
#define LGW_FILTER_GAIN 25
#define LGW_RADIO_SELECT 26
#define LGW_IF_FREQ_0 27
#define LGW_IF_FREQ_1 28
#define LGW_IF_FREQ_2 29
#define LGW_IF_FREQ_3 30
#define LGW_IF_FREQ_4 31
#define LGW_IF_FREQ_5 32
#define LGW_IF_FREQ_6 33
#define LGW_IF_FREQ_7 34
#define LGW_IF_FREQ_8 35
#define LGW_IF_FREQ_9 36
#define LGW_CORR0_CHAN 37
#define LGW_CORR1_CHAN 38
#define LGW_CORR2_CHAN 39
#define LGW_CORR3_CHAN 40
#define LGW_CORR4_CHAN 41
#define LGW_CORR5_CHAN 42
#define LGW_CORR6_CHAN 43
#define LGW_CORR7_CHAN 44
#define LGW_CHANN_OVERRIDE_AGC_GAIN 45
#define LGW_CHANN_AGC_GAIN 46
#define LGW_CORR_DETECT_EN 47
#define LGW_CORR_SAME_PEAKS_OPTION_SF6 48
#define LGW_CORR_SAME_PEAKS_OPTION_SF7 49
#define LGW_CORR_SAME_PEAKS_OPTION_SF8 50
#define LGW_CORR_SAME_PEAKS_OPTION_SF9 51
#define LGW_CORR_SAME_PEAKS_OPTION_SF10 52
#define LGW_CORR_SAME_PEAKS_OPTION_SF11 53
#define LGW_CORR_SAME_PEAKS_OPTION_SF12 54
#define LGW_CORR_SIG_NOISE_RATIO_SF6 55
#define LGW_CORR_SIG_NOISE_RATIO_SF7 56
#define LGW_CORR_SIG_NOISE_RATIO_SF8 57
#define LGW_CORR_SIG_NOISE_RATIO_SF9 58
#define LGW_CORR_SIG_NOISE_RATIO_SF10 59
#define LGW_CORR_SIG_NOISE_RATIO_SF11 60
#define LGW_CORR_SIG_NOISE_RATIO_SF12 61
#define LGW_CORR_NUM_SAME_PEAK 62
#define LGW_CORR_MAC_GAIN 63
#define LGW_ADJUST_MODEM_START_OFFSET_RDX8 64
#define LGW_ADJUST_MODEM_START_OFFSET_RDX4 65
#define LGW_ADJUST_MODEM_START_OFFSET_SF12_RDX4 66
#define LGW_DBG_CORR_SELECT_SF 67
#define LGW_DBG_CORR_SELECT_CHANNEL 68
#define LGW_DBG_DETECT_CPT 69
#define LGW_DBG_SYMB_CPT 70
#define LGW_CHIRP_INVERT_RX 71
#define LGW_DC_NOTCH_EN 72
#define LGW_IMPLICIT_CRC_EN 73
#define LGW_IMPLICIT_CODING_RATE 74
#define LGW_IMPLICIT_PAYLOAD_LENGHT 75
#define LGW_FREQ_TO_TIME_INVERT 76
#define LGW_FREQ_TO_TIME_DRIFT 77
#define LGW_PAYLOAD_FINE_TIMING_GAIN 78
#define LGW_PREAMBLE_FINE_TIMING_GAIN 79
#define LGW_TRACKING_INTEGRAL 80
#define LGW_FRAME_SYNCH_PEAK1_POS 81
#define LGW_FRAME_SYNCH_PEAK2_POS 82
#define LGW_PREAMBLE_SYMB1_NB 83
#define LGW_FRAME_SYNCH_GAIN 84
#define LGW_SYNCH_DETECT_TH 85
#define LGW_LLR_SCALE 86
#define LGW_SNR_AVG_CST 87
#define LGW_PPM_OFFSET 88
#define LGW_MAX_PAYLOAD_LEN 89
#define LGW_ONLY_CRC_EN 90
#define LGW_ZERO_PAD 91
#define LGW_MBWSSF_IMPLICIT_HEADER 92
#define LGW_MBWSSF_IMPLICIT_CRC_EN 93
#define LGW_MBWSSF_IMPLICIT_CODING_RATE 94
#define LGW_MBWSSF_IMPLICIT_PAYLOAD_LENGHT 95
#define LGW_MBWSSF_AGC_FREEZE_ON_DETECT 96
#define LGW_MBWSSF_FRAME_SYNCH_PEAK1_POS 97
#define LGW_MBWSSF_FRAME_SYNCH_PEAK2_POS 98
#define LGW_MBWSSF_PREAMBLE_SYMB1_NB 99
#define LGW_MBWSSF_FRAME_SYNCH_GAIN 100
#define LGW_MBWSSF_SYNCH_DETECT_TH 101
#define LGW_MBWSSF_DETECT_MIN_SINGLE_PEAK 102
#define LGW_MBWSSF_DETECT_TRIG_SAME_PEAK_NB 103
#define LGW_MBWSSF_FREQ_TO_TIME_INVERT 104
#define LGW_MBWSSF_FREQ_TO_TIME_DRIFT 105
#define LGW_MBWSSF_PPM_CORRECTION 106
#define LGW_MBWSSF_PAYLOAD_FINE_TIMING_GAIN 107
#define LGW_MBWSSF_PREAMBLE_FINE_TIMING_GAIN 108
#define LGW_MBWSSF_TRACKING_INTEGRAL 109
#define LGW_MBWSSF_ZERO_PAD 110
#define LGW_MBWSSF_MODEM_BW 111
#define LGW_MBWSSF_RADIO_SELECT 112
#define LGW_MBWSSF_RX_CHIRP_INVERT 113
#define LGW_MBWSSF_LLR_SCALE 114
#define LGW_MBWSSF_SNR_AVG_CST 115
#define LGW_MBWSSF_PPM_OFFSET 116
#define LGW_MBWSSF_RATE_SF 117
#define LGW_MBWSSF_ONLY_CRC_EN 118
#define LGW_MBWSSF_MAX_PAYLOAD_LEN 119
#define LGW_DEC_GAIN_OFFSET 120
#define LGW_FORCE_HOST_CONFIG_CTRL 121
#define LGW_FORCE_HOST_SPI_MASTER_CTRL 122
#define LGW_FORCE_CHAN_GAIN 123
#define LGW_FORCE_DEC_FILTER_GAIN 124
#define LGW_FORCE_HOST_RADIO_CTRL 125
#define LGW_PIC16F84_RST 126
#define LGW_PIC16F84_SELECT_MUX 127
#define LGW_PIC16F84_CORRUPTION_DETECTED 128
#define LGW_CHANN_SELECT_RSSI 129
#define LGW_RSSI_BB_DEFAULT_VALUE 130
#define LGW_RSSI_DEC_DEFAULT_VALUE 131
#define LGW_RSSI_CHANN_DEFAULT_VALUE 132
#define LGW_RSSI_BB_FILTER_ALPHA 133
#define LGW_RSSI_DEC_FILTER_ALPHA 134
#define LGW_RSSI_CHANN_FILTER_ALPHA 135
#define LGW_IQ_MISMATCH_A_AMP_COEFF 136
#define LGW_IQ_MISMATCH_A_PHI_COEFF 137
#define LGW_IQ_MISMATCH_B_AMP_COEFF 138
#define LGW_IQ_MISMATCH_B_SEL_I 139
#define LGW_IQ_MISMATCH_B_PHI_COEFF 140
#define LGW_TX_TRIG_IMMEDIATE 141
#define LGW_TX_TRIG_DELAYED 142
#define LGW_TX_FRAME_SYNCH_PEAK1_POS 143
#define LGW_TX_FRAME_SYNCH_PEAK2_POS 144
#define LGW_TX_PREAMBLE_SYMB1_NB 145
#define LGW_TX_OFFSET_I 146
#define LGW_TX_OFFSET_Q 147
#define LGW_TX_MODE 148
#define LGW_TX_ZERO_PAD 149
#define LGW_TX_PPM_OFFSET 150
#define LGW_TX_CHIRP_INVERT 151
#define LGW_TX_CONT_CHIRP 152
#define LGW_TX_GAIN 153
#define LGW_TX_CHIRP_LOW_PASS 154
#define LGW_TX_FCC_WIDEBAND 155
#define LGW_TX_SWAP_IQ 156
#define LGW_SPI_RADIO_A__DATA 157
#define LGW_SPI_RADIO_A__DATA_READBACK 158
#define LGW_SPI_RADIO_A__ADDR 159
#define LGW_SPI_RADIO_A__CS 160
#define LGW_RADIO_EN_A 161
#define LGW_RADIO_RST_A 162
#define LGW_LNA_EN_A 163
#define LGW_PA_EN_A 164
#define LGW_PA_GAIN_A 165
#define LGW_SPI_RADIO_B__DATA 166
#define LGW_SPI_RADIO_B__DATA_READBACK 167
#define LGW_SPI_RADIO_B__ADDR 168
#define LGW_SPI_RADIO_B__CS 169
#define LGW_RADIO_EN_B 170
#define LGW_RADIO_RST_B 171
#define LGW_LNA_EN_B 172
#define LGW_PA_EN_B 173
#define LGW_PA_GAIN_B 174
#define LGW_CAPTURE_SOURCE 175
#define LGW_CAPTURE_START 176
#define LGW_CAPTURE_FORCE_TRIGGER 177
#define LGW_CAPTURE_WRAP 178
#define LGW_CAPTURE_PERIOD 179
#define LGW_LED_REG 180
#define LGW_MODEM_STATUS 181
#define LGW_VALID_HEADER_COUNTER_0 182
#define LGW_VALID_HEADER_COUNTER_1 183
#define LGW_VALID_PACKET_COUNTER_0 184
#define LGW_VALID_PACKET_COUNTER_1 185
#define LGW_VALID_HEADER_COUNTER_MBWSSF 186
#define LGW_VALID_HEADER_COUNTER_FSK 187
#define LGW_VALID_PACKET_COUNTER_MBWSSF 188
#define LGW_VALID_PACKET_COUNTER_FSK 189
#define LGW_CHANN_RSSI 190
#define LGW_BB_RSSI 191
#define LGW_DEC_RSSI 192
#define LGW_DBG_PIC_DATA 193
#define LGW_DBG_ARB_PIC_RAM_DATA 194
#define LGW_DBG_AGC_PIC_RAM_DATA 195
#define LGW_NEXT_PACKET_CNT 196
#define LGW_ADDR_CAPTURE_COUNT 197
#define LGW_TIMESTAMP 198
#define LGW_DBG_CHANN0_GAIN 199
#define LGW_DBG_CHANN1_GAIN 200
#define LGW_DBG_CHANN2_GAIN 201
#define LGW_DBG_CHANN3_GAIN 202
#define LGW_DBG_CHANN4_GAIN 203
#define LGW_DBG_CHANN5_GAIN 204
#define LGW_DBG_CHANN6_GAIN 205
#define LGW_DBG_CHANN7_GAIN 206
#define LGW_DBG_DEC_FILT_GAIN 207
#define LGW_SPI_DATA_FIFO_PTR 208
#define LGW_PACKET_DATA_FIFO_PTR 209
#define LGW_DBG_ARB_PIC_RAM_ADDR 210
#define LGW_DBG_AGC_PIC_RAM_ADDR 211
#define LGW_SPI_MASTER_CHIP_SELECT_POLARITY 212
#define LGW_SPI_MASTER_CPOL 213
#define LGW_SPI_MASTER_CPHA 214
#define LGW_SIG_GEN_ANALYSER_MUX_SEL 215
#define LGW_SIG_GEN_EN 216
#define LGW_SIG_ANALYSER_EN 217
#define LGW_SIG_ANALYSER_AVG_LEN 218
#define LGW_SIG_ANALYSER_PRECISION 219
#define LGW_SIG_ANALYSER_VALID_OUT 220
#define LGW_SIG_GEN_FREQ 221
#define LGW_SIG_ANALYSER_FREQ 222
#define LGW_SIG_ANALYSER_I_OUT 223
#define LGW_SIG_ANALYSER_Q_OUT 224
#define LGW_GPS_EN 225
#define LGW_GPS_POL 226

#define LGW_TOTALREGS 227

/* -------------------------------------------------------------------------- */
/* --- PUBLIC FUNCTIONS PROTOTYPES ------------------------------------------ */

/**
@brief Connect Lora gateway by opening SPI link
@return status of register operation (LGW_REG_SUCCESS/LGW_REG_ERROR)
*/
int lgw_connect(void);

/**
@brief Disconnect Lora gateway by closing SPI link
@return status of register operation (LGW_REG_SUCCESS/LGW_REG_ERROR)
*/
int lgw_disconnect(void);

/**
@brief Use the soft-reset register to put the gateway in initial state
@return status of register operation (LGW_REG_SUCCESS/LGW_REG_ERROR)
*/
int lgw_soft_reset(void);

/**
@brief Check if the registers are ok, send diagnostics to stdio/stderr/file
@param f file descriptor to to which the check result will be written
@return status of register operation (LGW_REG_SUCCESS/LGW_REG_ERROR)
*/
int lgw_reg_check(FILE *f);

/**
@brief Lora gateway register write
@param register_id register number in the data structure describing registers
@param reg_value signed value to write to the register (for u32, use cast)
@return status of register operation (LGW_REG_SUCCESS/LGW_REG_ERROR)
*/
int lgw_reg_w(uint16_t register_id, int32_t reg_value);

/**
@brief Lora gateway register read
@param register_id register number in the data structure describing registers
@param reg_value pointer to a variable where to write register read value
@return status of register operation (LGW_REG_SUCCESS/LGW_REG_ERROR)
*/
int lgw_reg_r(uint16_t register_id, int32_t *reg_value);

/**
@brief Lora gateway register burst write
@param register_id register number in the data structure describing registers
@param data pointer to byte array that will be sent to the Lora gateway
@param size size of the transfer, in byte(s)
@return status of register operation (LGW_REG_SUCCESS/LGW_REG_ERROR)
*/
int lgw_reg_wb(uint16_t register_id, uint8_t *data, uint16_t size);

/**
@brief Lora gateway register burst read
@param register_id register number in the data structure describing registers
@param data pointer to byte array that will be written from the Lora gateway
@param size size of the transfer, in byte(s)
@return status of register operation (LGW_REG_SUCCESS/LGW_REG_ERROR)
*/
int lgw_reg_rb(uint16_t register_id, uint8_t *data, uint16_t size);


#endif

/* --- EOF ------------------------------------------------------------------ */
